AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Practice #3: Cration of 3 Lambda Functions and a WP on S3 ' 
Resources:
#Creacion de VPC
  RedeVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16   
#Creacion Internet Gateway 
  RedeIG:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags: 
      - Key: foo
        Value: bar
#Asignar Internet Gateway A VPC
  RedeIGAttachment :  
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: 
        Ref: RedeIG
      VpcId: 
        Ref: RedeVPC
#Creacion de NACl-AZ
  RedeNAClAZ1:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: 
        Ref: RedeVPC
#Creacion de Inbound Rule
  RedeInboundRuleAZ1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: 
        Ref: RedeNAClAZ1
      RuleNumber: '100'
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Egress: "true"
#Creacion de Outbound Rule
  RedeOutboundRuleAZ1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: 
        Ref: RedeNAClAZ1
      RuleNumber: '100'
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Egress: "false" 
#Creacion de Subnet Publica
  RedeSBPublic1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: 
        Ref: RedeVPC
      CidrBlock: 10.0.16.0/20
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
#Asignacion de NACL
  SubnetPublic1NACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: 
        Ref: RedeSBPublic1
      NetworkAclId: 
        Ref: RedeNAClAZ1    
#Creacion de NatGWEIP
  RedeNatGatewayEIP:
    Type: "AWS::EC2::EIP"
    DependsOn: RedeIGAttachment
    Properties: 
      Domain: vpc
#Asignacion de NatGW
  RedeNat: 
    Type: "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: 
        Fn::GetAtt: RedeNatGatewayEIP.AllocationId
      SubnetId: 
        Ref: RedeSBPublic1
#Creacion de Route Table Publica
  RedeRTPublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: 
        Ref: RedeVPC
#Dependencia de Route Table Publica
  DefaultPublicRoute: 
    Type: "AWS::EC2::Route"
    DependsOn: RedeIGAttachment
    Properties: 
      RouteTableId: 
        Ref: RedeRTPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
        Ref: RedeIG
#Asignacion de Route Table Publica a Subnet Publica  
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: 
        Ref: RedeRTPublic
      SubnetId: 
        Ref: RedeSBPublic1
#Creacion de Subnet Privada
  RedeSBPrivate:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: 
        Ref: RedeVPC
      CidrBlock: 10.0.75.0/20
      AvailabilityZone: us-east-1a
#Creacion de Route Table Privada
  RedeRTPrivate:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: 
        Ref: RedeVPC
#Dependencia de Route Table Privada
  DefaultPrivateRoute: 
    Type: "AWS::EC2::Route"
    DependsOn: RedeIGAttachment
    Properties: 
      RouteTableId: 
        Ref: RedeRTPrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: 
        Ref: RedeNat
#Asignacion de Route Table Privada a Subnet Privada  
  PrivareSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: 
        Ref: RedeRTPrivate
      SubnetId: 
        Ref: RedeSBPrivate
#Creacion de Security Group Para LAMBDA
  RedeSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: RedeSG
      GroupDescription: Permite el acceso de los http y SSH a traves del puerto 80/22/443
      VpcId: 
        Ref: RedeVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
          CidrIp: 0.0.0.0/0
#Creacion de S3 Bucket 
  RedeS3:   
    Type: "AWS::S3::Bucket"
    Properties:
        AccessControl: PublicRead
        BucketName: rede-s3-lab
#Creacion del DynamoDB Endpoint para VPC 
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*" 
            Principal: "*"
            Resource: "*"
      RouteTableIds:
          - Ref: RedeRTPrivate
      ServiceName: 
            Fn::Join: [ "", [ "com.amazonaws.", Ref: AWS::Region, ".dynamodb" ] ]
      VpcId: 
          Ref: RedeVPC
#Creacion de Tabla para DynamoDB
  GameTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: N
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


